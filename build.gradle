buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.owasp:dependency-check-gradle:8.4.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
	id 'pmd'
	id 'jacoco'
	id 'com.github.spotbugs' version '6.1.7'
}

apply plugin: 'org.owasp.dependencycheck'

group = 'at.fhburgenland'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
	maven {
		url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

checkstyle {
	toolVersion = "10.12.3"
	configFile = file("config/checkstyle/checkstyle.xml")
}

pmd {
	toolVersion = "6.55.0"
	ruleSetFiles = files("config/pmd/ruleset.xml")
	ruleSets = []
}

spotbugs {
	toolVersion = '4.9.3'
	ignoreFailures = true
	showStackTraces = true
	showProgress = true
	reportsDir = file("$buildDir/reports/spotbugs")
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {
	excludeFilter = file("config/spotbugs/exclude.xml")
	effort.set(com.github.spotbugs.snom.Effort.valueOf('MAX'))
	reportLevel.set(com.github.spotbugs.snom.Confidence.valueOf('LOW'))
	reports {
		xml.required.set(true)
		html.required.set(true)
	}
}

jacoco {
	toolVersion = "0.8.11"
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

dependencyCheck {
	format = 'HTML'
	outputDirectory = "${buildDir}/reports"
	failBuildOnCVSS = 7
}
